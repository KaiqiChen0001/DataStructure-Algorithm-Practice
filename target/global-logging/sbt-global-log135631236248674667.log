[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\INnovation\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\INnovation\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 17.0.4.1)
[debug]       Load.loadUnit: plugins took 169.6387ms
[debug]       Load.loadUnit: defsScala took 0.7242ms
[debug] [Loading] Scanning directory C:\Users\INnovation\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\INnovation\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 29.8272 ms
[debug]           Load.resolveProject(global-plugins) took 74.6251ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\INnovation\.sbt\1.0\plugins, plugins: List(<none>))) took 124.661ms
[debug] [Loading] Done in C:\Users\INnovation\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 170.006ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2354ms
[debug]     Load.loadUnit(file:/C:/Users/INnovation/.sbt/1.0/plugins/, ...) took 358.1184ms
[debug]   Load.apply: load took 651.2908ms
[debug]   Load.apply: resolveProjects took 9.1355ms
[debug]   Load.apply: finalTransforms took 80.4129ms
[debug]   Load.apply: config.delegates took 9.4303ms
[debug]   Load.apply: Def.make(settings)... took 495.5307ms
[debug]   Load.apply: structureIndex took 135.4483ms
[debug]   Load.apply: mkStreams took 1.6292ms
[info] loading global plugins from C:\Users\INnovation\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7338.8724ms
[debug]           Load.loadUnit: plugins took 40.6305ms
[debug]           Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\INnovation\IdeaProjects\HelloWorld\project
[debug]             Load.loadUnit: mkEval took 6.5375ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\INnovation\IdeaProjects\HelloWorld\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3353 ms
[info] loading settings for project helloworld-build from idea.sbt ...
[debug]               Load.resolveProject(helloworld-build) took 4.1732ms
[debug]             Load.loadTransitive: finalizeProject(Project(id helloworld-build, base: C:\Users\INnovation\IdeaProjects\HelloWorld\project, plugins: List(<none>))) took 5.9004ms
[debug] [Loading] Done in C:\Users\INnovation\IdeaProjects\HelloWorld\project, returning: (helloworld-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2761.6661ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.5715ms
[debug]         Load.loadUnit(file:/C:/Users/INnovation/IdeaProjects/HelloWorld/project/, ...) took 2814.9978ms
[debug]       Load.apply: load took 2817.3499ms
[debug]       Load.apply: resolveProjects took 0.0935ms
[debug]       Load.apply: finalTransforms took 18.1857ms
[debug]       Load.apply: config.delegates took 0.3439ms
[debug]       Load.apply: Def.make(settings)... took 98.4991ms
[debug]       Load.apply: structureIndex took 40.1251ms
[debug]       Load.apply: mkStreams took 0.002ms
[info] loading project definition from C:\Users\INnovation\IdeaProjects\HelloWorld\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4458.0527ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\INnovation\IdeaProjects\HelloWorld
[debug]       Load.loadUnit: mkEval took 0.3663ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5776 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 44.9895ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\INnovation\IdeaProjects\HelloWorld, plugins: List(<none>))) took 48.6115ms
[debug] [Loading] Done in C:\Users\INnovation\IdeaProjects\HelloWorld, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1386.9892ms
[debug]     Load.loadUnit: cleanEvalClasses took 35.6199ms
[debug]   Load.loadUnit(file:/C:/Users/INnovation/IdeaProjects/HelloWorld/, ...) took 5881.6835ms
[debug] Load.apply: load took 5884.0249ms
[debug] Load.apply: resolveProjects took 0.0839ms
[debug] Load.apply: finalTransforms took 44.2418ms
[debug] Load.apply: config.delegates took 0.3018ms
[debug] Load.apply: Def.make(settings)... took 95.631ms
[debug] Load.apply: structureIndex took 25.0073ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to HelloWorld (in build file:/C:/Users/INnovation/IdeaProjects/HelloWorld/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 8384 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 8384, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to HelloWorld (in build file:/C:/Users/INnovation/IdeaProjects/HelloWorld/)
[debug] > Exec(idea-shell, None, None)
